1. 
When the Avatar and the goodies are on the same square. I take the perspective of the goodie and check to see if the avatar is on the same square as the goodie. In my StudentWorld class, I return a pointer to the avatar object. In my generic class, I have a pointer that return current World and then using that World object, I am able to access the pointer to my avatar pointer. If the two objects are on the same square(by using getX() and getY() for the goodie). I set the specific goodie object's hit points to 0. When I set it to 0, my move function in my StudentWorld.cpp will automatically delete it. Then I increment the score accordingly and play the corresponding sound. Essentially, my actor class doesn't know that it stepped on a goodie since all of that functionality is handled by the goodie. All this checking from the goodie's perspective in handled in the specific goodie's doSomething() function. For each specific goodie I have a function that does what it supposed to do. For example, for the extra life goodie, I use my function that return the current World. Then using the current world, I call the function incLives(). I do similar things for the ammo and restoreHealthGoodie. For ammo, I get the current world, return the avatar pointer and then call my setAmmo function which takes an int as a parameter and sets the value of ammo to the parameter passed in. For restoreHealthGoodie, since the avatar holds its own hitpoints, I can call this line of code getWorld()->returnP()->setHitpoints(20); which will increment the avatars's hitpoints.


2. To my knowledge, I was able to implement all functionalities in the spec.


3. One design specification that I made was that I didn't know that we were provided a function for a random number generator. I searched on the web how to create a random number generator and used that code instead. In the spec, it didn't specifically say I had to use the random number generator provided, and my gameplay seemed the exact same as the game provided, so I ended up keeping my current code. For the ticks. I created a counter in student world that counts up and then used the modulus operator to determine when the robots should act. 