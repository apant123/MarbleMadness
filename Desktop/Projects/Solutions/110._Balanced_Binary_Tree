# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        # self.result = True

        # def dfs(root):
        #     if root == None:
        #         return 0
            
        #     left = dfs(root.left)
        #     right = dfs(root.right)
        #     difference = abs(right - left)
        #     if self.result:
        #         self.result = True if difference <= 1 else False
        #     return 1 + max(left,right)
        # dfs(root)
        # return self.result
            def dfs(root):
                if root is None:
                    return [True,0]
                left = dfs(root.left)
                right = dfs(root.right)
                difference = (left[0] and right[0]) and (abs(left[1] - right[1]) <= 1)
                return [difference,  1 + max(left[1],right[1])]
            return dfs(root)[0]
            
        
        
